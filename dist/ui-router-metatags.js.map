{"version":3,"sources":["ui-router-metatags.ts","ui-router-metatags.js"],"names":["uiroutermetatags","uiroutermetatags.UIRouterMetatags","uiroutermetatags.UIRouterMetatags.constructor","uiroutermetatags.UIRouterMetatags.setTitlePrefix","uiroutermetatags.UIRouterMetatags.setTitleSuffix","uiroutermetatags.UIRouterMetatags.setDefaultTitle","uiroutermetatags.UIRouterMetatags.setDefaultDescription","uiroutermetatags.UIRouterMetatags.setDefaultKeywords","uiroutermetatags.UIRouterMetatags.setStaticProperties","uiroutermetatags.UIRouterMetatags.setOGURL","uiroutermetatags.UIRouterMetatags.$get","uiroutermetatags.MetaTags","uiroutermetatags.MetaTags.constructor","uiroutermetatags.MetaTags.update","uiroutermetatags.MetaTags.getValue","uiroutermetatags.runBlock","uiroutermetatags.runBlock.stateChangeSuccess"],"mappings":"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","file":"ui-router-metatags.js","sourcesContent":["namespace uiroutermetatags {\r\n\tconst appModule = angular.module('ui.router.metatags', ['ui.router']);\r\n\r\n\texport class UIRouterMetatags implements angular.IServiceProvider, uiroutermetatags.IProvider {\r\n\t\tprefix: string = '';\r\n\t\tsuffix: string = '';\r\n\t\tdefaultTitle: string = '';\r\n\t\tdefaultDescription: string = '';\r\n\t\tdefaultKeywords: string = '';\r\n\t\tstaticProperties: {} = {};\r\n\t\tenableOGURL: boolean = false;\r\n\r\n\t\t/* @ngInject */\r\n\t\tconstructor() {\r\n\r\n\t\t}\r\n\r\n\t\tsetTitlePrefix(prefix: string): UIRouterMetatags {\r\n\t\t\tthis.prefix = prefix;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetTitleSuffix(suffix: string): UIRouterMetatags {\r\n\t\t\tthis.suffix = suffix;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetDefaultTitle(title: string): UIRouterMetatags {\r\n\t\t\tthis.defaultTitle = title\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tsetDefaultDescription(description: string): UIRouterMetatags {\r\n\t\t\tthis.defaultDescription = description;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tsetDefaultKeywords(keywords: string): UIRouterMetatags {\r\n\t\t\tthis.defaultKeywords = keywords;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetStaticProperties(properties: {}): UIRouterMetatags {\r\n\t\t\tthis.staticProperties = properties;\r\n\t\t\treturn this;\t\r\n\t\t}\r\n\r\n\t\tsetOGURL(enabled: boolean): UIRouterMetatags {\r\n\t\t\tthis.enableOGURL = enabled;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic $get(): uiroutermetatags.IService {\r\n\t\t\treturn {\r\n\t\t\t\tprefix: this.prefix,\r\n\t\t\t\tsuffix: this.suffix,\r\n\t\t\t\tdefaultTitle: this.defaultTitle,\r\n\t\t\t\tdefaultDescription: this.defaultDescription,\r\n\t\t\t\tdefaultKeywords: this.defaultKeywords,\r\n\t\t\t\tstaticProperties: this.staticProperties,\r\n\t\t\t\tenableOGURL: this.enableOGURL\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.provider('UIRouterMetatags', UIRouterMetatags);\r\n\r\n\texport class MetaTags {\r\n\t\ttitle: string;\r\n\t\tkeywords: string;\r\n\t\tdescription: string;\r\n\t\tproperties: {};\r\n\t\tstdProperties: {};\r\n\t\t\r\n\t\t/* @ngInject */\r\n\t\tconstructor(public $log: angular.ILogService, public UIRouterMetatags: uiroutermetatags.IService, public $interpolate: angular.IInterpolateService, public $injector: angular.auto.IInjectorService, public $state: any, public $location: angular.ILocationService) {\r\n\t\t}\r\n\r\n\t\tupdate(tags: uiroutermetatags.IMetaTags) {\r\n\t\t\tthis.properties = this.UIRouterMetatags.staticProperties;\r\n\t\t\t\r\n\t\t\tif (this.UIRouterMetatags.enableOGURL) {\r\n\t\t\t\tthis.properties['og:url'] = this.$location.absUrl();\r\n\t\t\t}\r\n\r\n\t\t\tif (tags) {\r\n\t\t\t\tthis.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue(tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\tthis.description = tags.description ? this.getValue(tags.description) : this.UIRouterMetatags.defaultDescription;\r\n\t\t\t\tthis.keywords = tags.keywords ? this.getValue(tags.keywords) : this.UIRouterMetatags.defaultKeywords;\r\n\t\t\t\tangular.forEach(tags.properties, (value, key) => {\r\n\t\t\t\t\tvar v = this.getValue(value);\r\n\t\t\t\t\tif (v && v.trim().length > 0) {\r\n\t\t\t\t\t\tthis.properties[key] = v;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.title = this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\tthis.description = this.UIRouterMetatags.defaultDescription;\r\n\t\t\t\tthis.keywords = this.UIRouterMetatags.defaultKeywords;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetValue(tag) {\r\n\t\t\treturn Array.isArray(tag) ? this.$injector.invoke(tag, this, this.$state.$current.locals.globals) : this.$interpolate(tag)(this.$state.$current.locals.globals);\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.service('MetaTags', MetaTags);\r\n\t\r\n\t/* @ngInject */\r\n\tfunction runBlock($log: angular.ILogService, $rootScope: any, MetaTags: uiroutermetatags.MetaTags) {\r\n\t\t$rootScope.MetaTags = MetaTags;\r\n\r\n\t\t$rootScope.$on(\"$stateChangeSuccess\", stateChangeSuccess);\r\n\r\n\t\tfunction stateChangeSuccess(event: angular.IAngularEvent, toState: any) {\r\n\t\t\tif (!toState.metaTags) {\r\n\t\t\t\t$log.debug(`MetaTags - route: \"${toState.name}\" does not contain any metatags`);\r\n\t\t\t}\r\n\t\t\tMetaTags.update(toState.metaTags);\r\n\t\t};\r\n\t}\r\n\r\n\tappModule.run(runBlock);\r\n\r\n}","var uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n            this.defaultDescription = '';\n            this.defaultKeywords = '';\n            this.staticProperties = {};\n            this.enableOGURL = false;\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultDescription = function (description) {\n            this.defaultDescription = description;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultKeywords = function (keywords) {\n            this.defaultKeywords = keywords;\n            return this;\n        };\n        UIRouterMetatags.prototype.setStaticProperties = function (properties) {\n            this.staticProperties = properties;\n            return this;\n        };\n        UIRouterMetatags.prototype.setOGURL = function (enabled) {\n            this.enableOGURL = enabled;\n            return this;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle,\n                defaultDescription: this.defaultDescription,\n                defaultKeywords: this.defaultKeywords,\n                staticProperties: this.staticProperties,\n                enableOGURL: this.enableOGURL\n            };\n        };\n        return UIRouterMetatags;\n    })();\n    uiroutermetatags.UIRouterMetatags = UIRouterMetatags;\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags($log, UIRouterMetatags, $interpolate, $injector, $state, $location) {\n            this.$log = $log;\n            this.UIRouterMetatags = UIRouterMetatags;\n            this.$interpolate = $interpolate;\n            this.$injector = $injector;\n            this.$state = $state;\n            this.$location = $location;\n        }\n        MetaTags.prototype.update = function (tags) {\n            var _this = this;\n            this.properties = this.UIRouterMetatags.staticProperties;\n            if (this.UIRouterMetatags.enableOGURL) {\n                this.properties['og:url'] = this.$location.absUrl();\n            }\n            if (tags) {\n                this.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue(tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                this.description = tags.description ? this.getValue(tags.description) : this.UIRouterMetatags.defaultDescription;\n                this.keywords = tags.keywords ? this.getValue(tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n                angular.forEach(tags.properties, function (value, key) {\n                    var v = _this.getValue(value);\n                    if (v && v.trim().length > 0) {\n                        _this.properties[key] = v;\n                    }\n                });\n            }\n            else {\n                this.title = this.UIRouterMetatags.defaultTitle;\n                this.description = this.UIRouterMetatags.defaultDescription;\n                this.keywords = this.UIRouterMetatags.defaultKeywords;\n            }\n        };\n        MetaTags.prototype.getValue = function (tag) {\n            return Array.isArray(tag) ? this.$injector.invoke(tag, this, this.$state.$current.locals.globals) : this.$interpolate(tag)(this.$state.$current.locals.globals);\n        };\n        return MetaTags;\n    })();\n    uiroutermetatags.MetaTags = MetaTags;\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlock($log, $rootScope, MetaTags) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on(\"$stateChangeSuccess\", stateChangeSuccess);\n        function stateChangeSuccess(event, toState) {\n            if (!toState.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + toState.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update(toState.metaTags);\n        }\n        ;\n    }\n    appModule.run(runBlock);\n})(uiroutermetatags || (uiroutermetatags = {}));\n"],"sourceRoot":"/source/"}