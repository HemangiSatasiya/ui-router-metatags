{"version":3,"sources":["ui-router-metatags.ts"],"names":["uiroutermetatags","runBlockTransitions","$log","MetaTags","$window","$transitions","onStart","transition","prerenderReady","onSuccess","toState","$to","$from","metaTags","debug","name","update","onError","prerender","statusCode","appModule","angular","module","UIRouterMetatags","this","prefix","suffix","defaultTitle","defaultDescription","defaultKeywords","defaultRobots","staticProperties","enableOGURL","prototype","setTitlePrefix","setTitleSuffix","setDefaultTitle","title","setDefaultDescription","description","setDefaultKeywords","keywords","setDefaultRobots","robots","setStaticProperties","properties","setOGURL","enabled","$get","provider","$interpolate","$injector","$state","$location","$uiRouterGlobals","tags","_this","resolved","getResolveTokens","forEach","token","injector","get","extend","absUrl","getValue","value","key","v","header","err","error","tagType","tag","trim","length","isFunction","Array","isArray","invoke","service","run"],"mappings":"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","file":"ui-router-metatags.min.js","sourcesContent":["/**\r\n * Metatags for angular-ui-router\r\n */\r\nnamespace uiroutermetatags {\r\n\tconst appModule = angular.module('ui.router.metatags', ['ui.router']);\r\n\r\n\texport interface IMetaTags {\r\n\t\ttitle?: string | Function;\r\n\t\tdescription?: string | Function;\r\n\t\tkeywords?: string | Function;\r\n\t\trobots?: string | Function;\r\n\t\tproperties?: {\r\n\t\t\t[index: string]: string | Function;\r\n\t\t},\r\n\t\tprerender?: Prerender;\r\n\t}\r\n\r\n\texport interface Prerender {\r\n\t\tstatusCode?: number | Function,\r\n\t\theader?: string | Function\r\n\t}\r\n\r\n\texport interface IProvider {\r\n\t\tsetTitlePrefix(prefix: string): IProvider;\r\n\t\tsetTitleSuffix(suffix: string): IProvider;\r\n\t\tsetDefaultTitle(title: string): IProvider;\r\n\t\tsetDefaultDescription(description: string): IProvider;\r\n\t\tsetDefaultKeywords(keywords: string): IProvider;\r\n\t\tsetDefaultRobots(robots: string): IProvider;\r\n\t\tsetStaticProperties(properties: {}): IProvider;\r\n\t\tsetOGURL(enabled: boolean): IProvider;\r\n\t}\r\n\r\n\texport interface IService {\r\n\t\tupdate(tags: IMetaTags, transition: any): void;\r\n\t\tprerender: uiroutermetatags.Prerender;\r\n\t}\r\n\r\n\texport interface IConfig {\r\n\t\tprefix: string;\r\n\t\tsuffix: string;\r\n\t\tdefaultTitle: string;\r\n\t\tdefaultDescription: string;\r\n\t\tdefaultKeywords: string;\r\n\t\tdefaultRobots: string;\r\n\t\tstaticProperties: {};\r\n\t\tenableOGURL: boolean;\r\n\t}\r\n\r\n\tclass UIRouterMetatags implements angular.IServiceProvider, uiroutermetatags.IProvider {\r\n\t\tprefix: string = '';\r\n\t\tsuffix: string = '';\r\n\t\tdefaultTitle: string = '';\r\n\t\tdefaultDescription: string = '';\r\n\t\tdefaultKeywords: string = '';\r\n\t\tdefaultRobots: string = '';\r\n\t\tstaticProperties: {} = {};\r\n\t\tenableOGURL: boolean = false;\r\n\r\n\t\t/* @ngInject */\r\n\t\tconstructor() {\r\n\r\n\t\t}\r\n\r\n\t\tsetTitlePrefix(prefix: string): UIRouterMetatags {\r\n\t\t\tthis.prefix = prefix;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetTitleSuffix(suffix: string): UIRouterMetatags {\r\n\t\t\tthis.suffix = suffix;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetDefaultTitle(title: string): UIRouterMetatags {\r\n\t\t\tthis.defaultTitle = title;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetDefaultDescription(description: string): UIRouterMetatags {\r\n\t\t\tthis.defaultDescription = description;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetDefaultKeywords(keywords: string): UIRouterMetatags {\r\n\t\t\tthis.defaultKeywords = keywords;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetDefaultRobots(robots: string): UIRouterMetatags {\r\n\t\t\tthis.defaultRobots = robots;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetStaticProperties(properties: {}): UIRouterMetatags {\r\n\t\t\tthis.staticProperties = properties;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetOGURL(enabled: boolean): UIRouterMetatags {\r\n\t\t\tthis.enableOGURL = enabled;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic $get(): uiroutermetatags.IConfig {\r\n\t\t\treturn {\r\n\t\t\t\tprefix: this.prefix,\r\n\t\t\t\tsuffix: this.suffix,\r\n\t\t\t\tdefaultTitle: this.defaultTitle,\r\n\t\t\t\tdefaultDescription: this.defaultDescription,\r\n\t\t\t\tdefaultKeywords: this.defaultKeywords,\r\n\t\t\t\tdefaultRobots: this.defaultRobots,\r\n\t\t\t\tstaticProperties: this.staticProperties,\r\n\t\t\t\tenableOGURL: this.enableOGURL\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.provider('UIRouterMetatags', UIRouterMetatags);\r\n\r\n\tclass MetaTags {\r\n\t\ttitle: string;\r\n\t\tkeywords: string;\r\n\t\tdescription: string;\r\n\t\trobots: string;\r\n\t\tproperties: {};\r\n\t\tprerender: uiroutermetatags.Prerender = {};\r\n\t\t\r\n\t\t/* @ngInject */\r\n\t\tconstructor(public $log: angular.ILogService, public UIRouterMetatags: uiroutermetatags.IConfig, \r\n\t\t\tpublic $interpolate: angular.IInterpolateService, public $injector: angular.auto.IInjectorService, \r\n\t\t\tpublic $state: any, public $location: angular.ILocationService, public $window,\r\n\t\t\tpublic $uiRouterGlobals: any\r\n\t\t) {\r\n\t\t}\r\n\r\n\t\tupdate(tags: uiroutermetatags.IMetaTags, transition: any) {\r\n\t\t\ttry {\r\n\r\n\t\t\t\t/* \r\n\t\t\t\t\tThis hack is used to resolve the lack of \"this.$state.$current.locals.globals\".\r\n\t\t\t\t\tHere the resolved object is builded with all previews resolved data\r\n\t\t\t\t*/\r\n\t\t\t\tvar resolved = {}\r\n\t\t\t\tlet tokens = transition.getResolveTokens();\r\n\t\t\t\ttokens.forEach(token => resolved[token] = transition.injector().get(token));\r\n\r\n\t\t\t\tthis.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);\r\n\r\n\t\t\t\tif (this.UIRouterMetatags.enableOGURL) {\r\n\t\t\t\t\tthis.properties['og:url'] = this.$location.absUrl();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (tags) {\r\n\t\t\t\t\tthis.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue('title', tags.title, resolved) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\t\tthis.description = tags.description ? this.getValue('description', tags.description, resolved) : this.UIRouterMetatags.defaultDescription;\r\n\t\t\t\t\tthis.keywords = tags.keywords ? this.getValue('keywords', tags.keywords, resolved) : this.UIRouterMetatags.defaultKeywords;\r\n\t\t\t\t\tthis.robots = tags.robots ? this.getValue('robots', tags.robots, resolved) : this.UIRouterMetatags.defaultRobots;\r\n\t\t\t\t\tangular.forEach(tags.properties, (value, key) => {\r\n\t\t\t\t\t\tvar v = this.getValue(key, value, resolved);\r\n\t\t\t\t\t\tif (v) {\r\n\t\t\t\t\t\t\tthis.properties[key] = v;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.title = this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\t\tthis.description = this.UIRouterMetatags.defaultDescription;\r\n\t\t\t\t\tthis.keywords = this.UIRouterMetatags.defaultKeywords;\r\n\t\t\t\t\tthis.robots = this.UIRouterMetatags.defaultRobots;\r\n\t\t\t\t}\r\n\t\t\t\tif (tags && tags.prerender) {\r\n\t\t\t\t\tthis.prerender.statusCode = tags.prerender.statusCode ? this.getValue('prerender.statusCode', tags.prerender.statusCode, resolved) : 200;\r\n\t\t\t\t\tthis.prerender.header = tags.prerender.header ? this.getValue('rerender.header', tags.prerender.header, resolved) : null;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.prerender.statusCode = 200;\r\n\t\t\t\t\tthis.prerender.header = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$window.prerenderReady = true;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tthis.$log.error('error occured when extracting metatags:', err);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetValue(tagType: string, tag, resolved: any) {\r\n\t\t\ttry {\r\n\t\t\t\tif (!tag) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t} else if (typeof tag === 'number') {\r\n\t\t\t\t\treturn tag;\r\n\t\t\t\t} else if (typeof tag === 'string' && tag.trim().length === 0) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t} else if (angular.isFunction(tag) || Array.isArray(tag)) {\r\n\t\t\t\t\treturn this.$injector.invoke(tag, this, resolved);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.$interpolate(tag)(resolved);\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tthis.$log.error('error occured when trying to get the value of tag:', tagType, err);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.service('MetaTags', MetaTags);\r\n\r\n\t/* @ngInject */\r\n\tfunction runBlockTransitions($log: angular.ILogService, MetaTags: uiroutermetatags.IService, $window: angular.IWindowService, $transitions: any) {\r\n\r\n\t\t$transitions.onStart({}, onStart)\r\n\t\t$transitions.onSuccess({}, onSuccess)\r\n\t\t$transitions.onError({}, onError)\r\n\r\n\r\n\t\tfunction onStart(transition: any) {\r\n\t\t\t$window.prerenderReady = false;\r\n\t\t}\r\n\r\n\t\tfunction onSuccess(transition: any) {\r\n\t\t\tvar toState = transition.$to()\r\n\t\t\tvar fromState = transition.$from()\r\n\t\t\t\r\n\t\t\tif (!toState.metaTags) {\r\n\t\t\t\t$log.debug(`MetaTags - route: \"${toState.name}\" does not contain any metatags`);\r\n\t\t\t}\r\n\r\n\t\t\tMetaTags.update(toState.metaTags as uiroutermetatags.IMetaTags, transition);\r\n\t\t}\r\n\r\n\t\tfunction onError(transition: any) {\r\n\t\t\tMetaTags.prerender.statusCode = 500;\r\n\t\t\t$window.prerenderReady = true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tappModule.run(runBlockTransitions);\r\n}\r\n\r\ndeclare module angular.ui {\r\n    interface IState {\r\n\t\tmetaTags?: uiroutermetatags.IMetaTags;\r\n\t}\r\n}\r\n\r\ninterface Window {\r\n\tprerenderReady?: boolean;\r\n}\r\n"]}