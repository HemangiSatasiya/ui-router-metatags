{"version":3,"sources":["/source/ui-router-metatags.ts","/source/ui-router-metatags.js","ui-router-metatags.js"],"names":["uiroutermetatags","runBlock","uiroutermetatags.runBlock","uiroutermetatags.runBlock.stateChangeSuccess","uiroutermetatags.UIRouterMetatags","uiroutermetatags.UIRouterMetatags.constructor","uiroutermetatags.UIRouterMetatags.setTitlePrefix","uiroutermetatags.UIRouterMetatags.setTitleSuffix","uiroutermetatags.UIRouterMetatags.setDefaultTitle","uiroutermetatags.UIRouterMetatags.setDefaultDescription","uiroutermetatags.UIRouterMetatags.setDefaultKeywords","uiroutermetatags.UIRouterMetatags.$get","uiroutermetatags.MetaTags","uiroutermetatags.MetaTags.constructor","MetaTags","$inject","uiroutermetatags.MetaTags.update","uiroutermetatags.MetaTags.getValue"],"mappings":"AAAA,GAAUA,mBAAV,SAAUA,GC+EN,QAASC,GDSMD,EAA2BA,EAAiBA,GAK7DE,QAAAA,GAA4BA,EAA8BA,GACpDC,EAAQA,UACZA,EAAKA,MAAMA,sBAAsBA,EAAQA,KAAIA,mCAE9CA,EAASA,OAAOA,EAAQA,UARzBD,EAAWA,SAAWA,EAEtBA,EAAWA,IAAIA,sBAAuBA,GA1FvCF,GAAMA,GAAYA,QAAQA,OAAOA,sBAAuBA,cAExDA,EAAAA,WAQCI,QAAAA,KAPAC,KAAAA,OAAiBA,GACjBA,KAAAA,OAAiBA,GACjBA,KAAAA,aAAuBA,GACvBA,KAAAA,mBAA6BA,GAC7BA,KAAAA,gBAA0BA,GAyC3BD,MAlCCA,GAAAA,UAAAA,eAAAA,SAAeA,GAEdE,MADAA,MAAKA,OAASA,EACPA,MAGRF,EAAAA,UAAAA,eAAAA,SAAeA,GAEdG,MADAA,MAAKA,OAASA,EACPA,MAGRH,EAAAA,UAAAA,gBAAAA,SAAgBA,GAEfI,MADAA,MAAKA,aAAeA,EACbA,MAGRJ,EAAAA,UAAAA,sBAAAA,SAAsBA,GAErBK,MADAA,MAAKA,mBAAqBA,EACnBA,MAGRL,EAAAA,UAAAA,mBAAAA,SAAmBA,GAElBM,MADAA,MAAKA,gBAAkBA,EAChBA,MAGDN,EAAAA,UAAAA,KAAPA,WACCO,OACCA,OAAQA,KAAKA,OACbA,OAAQA,KAAKA,OACbA,aAAcA,KAAKA,aACnBA,mBAAoBA,KAAKA,mBACzBA,gBAAiBA,KAAKA,kBAGzBP,IA9CaJ,GAAAA,iBAAgBA,EAgD7BA,EAAUA,SAASA,mBAAoBA,EAEvCA,IAAAA,GAAAA,WAOCY,QAAAA,GAAmBA,EAAkCA,EAAoDA,EAAkDA,EAAiDA,GAAzLC,KAAAA,KAAAA,EAAkCA,KAAAA,iBAAAA,EAAoDA,KAAAA,aAAAA,EAAkDA,KAAAA,UAAAA,EAAiDA,KAAAA,OAAAA,EAuB7MD,ME7BOE,GAASC,SAAW,OAAQ,mBAAoB,eAAgB,YAAa,UFUnFH,EAAAA,UAAAA,OAAAA,SAAOA,GAAPI,GAAAA,GAAAA,IACCA,MAAKA,cACDA,GACHA,KAAKA,MAAQA,EAAKA,MAAQA,KAAKA,iBAAiBA,QAAUA,KAAKA,SAASA,EAAKA,QAAUA,IAAMA,KAAKA,iBAAiBA,OAASA,KAAKA,iBAAiBA,aAClJA,KAAKA,YAAcA,EAAKA,YAAcA,KAAKA,SAASA,EAAKA,aAAeA,KAAKA,iBAAiBA,mBAC9FA,KAAKA,SAAWA,EAAKA,SAAWA,KAAKA,SAASA,EAAKA,UAAYA,KAAKA,iBAAiBA,gBACrFA,QAAQA,QAAQA,EAAKA,WAAYA,SAACA,EAAOA,GACxCA,EAAKA,WAAWA,GAAOA,EAAKA,SAASA,OAGtCA,KAAKA,MAAQA,KAAKA,iBAAiBA,aACnCA,KAAKA,YAAcA,GACnBA,KAAKA,SAAWA,KAIlBJ,EAAAA,UAAAA,SAAAA,SAASA,GACRK,MAAOA,OAAMA,QAAQA,GAAOA,KAAKA,UAAUA,OAAOA,EAAKA,KAAMA,KAAKA,OAAOA,SAASA,OAAOA,SAAWA,KAAKA,aAAaA,GAAKA,KAAKA,OAAOA,SAASA,OAAOA,UAEzJL,IA9BaZ,GAAAA,SAAQA,EAgCrBA,EAAUA,QAAQA,WAAYA,GEM3BC,EAASc,SAAW,OAAQ,aAAc,YFU7Cf,EAAUA,IAAIA,IArGLA,mBAAAA","file":"ui-router-metatags.min.js","sourcesContent":["namespace uiroutermetatags {\r\n\tconst appModule = angular.module('ui.router.metatags', ['ui.router']);\r\n\r\n\texport class UIRouterMetatags implements angular.IServiceProvider, uiroutermetatags.IProvider {\r\n\t\tprefix: string = '';\r\n\t\tsuffix: string = '';\r\n\t\tdefaultTitle: string = '';\r\n\t\tdefaultDescription: string = '';\r\n\t\tdefaultKeywords: string = '';\r\n\r\n\t\t/* @ngInject */\r\n\t\tconstructor() {\r\n\r\n\t\t}\r\n\r\n\t\tsetTitlePrefix(prefix: string): UIRouterMetatags {\r\n\t\t\tthis.prefix = prefix;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetTitleSuffix(suffix: string): UIRouterMetatags {\r\n\t\t\tthis.suffix = suffix;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tsetDefaultTitle(title: string): UIRouterMetatags {\r\n\t\t\tthis.defaultTitle = title\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tsetDefaultDescription(description: string): UIRouterMetatags {\r\n\t\t\tthis.defaultDescription = description;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t\r\n\t\tsetDefaultKeywords(keywords: string): UIRouterMetatags {\r\n\t\t\tthis.defaultKeywords = keywords;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tpublic $get(): uiroutermetatags.IService {\r\n\t\t\treturn {\r\n\t\t\t\tprefix: this.prefix,\r\n\t\t\t\tsuffix: this.suffix,\r\n\t\t\t\tdefaultTitle: this.defaultTitle,\r\n\t\t\t\tdefaultDescription: this.defaultDescription,\r\n\t\t\t\tdefaultKeywords: this.defaultKeywords\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.provider('UIRouterMetatags', UIRouterMetatags);\r\n\r\n\texport class MetaTags {\r\n\t\ttitle: string;\r\n\t\tkeywords: string;\r\n\t\tdescription: string;\r\n\t\tproperties: {};\r\n\t\t\r\n\t\t/* @ngInject */\r\n\t\tconstructor(public $log: angular.ILogService, public UIRouterMetatags: uiroutermetatags.IService, public $interpolate: angular.IInterpolateService, public $injector: angular.auto.IInjectorService, public $state: any) {\r\n\r\n\t\t}\r\n\r\n\t\tupdate(tags: uiroutermetatags.IMetaTags) {\r\n\t\t\tthis.properties = {};\r\n\t\t\tif (tags) {\r\n\t\t\t\tthis.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue(tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\tthis.description = tags.description ? this.getValue(tags.description) : this.UIRouterMetatags.defaultDescription;\r\n\t\t\t\tthis.keywords = tags.keywords ? this.getValue(tags.keywords) : this.UIRouterMetatags.defaultKeywords;\r\n\t\t\t\tangular.forEach(tags.properties, (value, key) => {\r\n\t\t\t\t\tthis.properties[key] = this.getValue(value);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.title = this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\tthis.description = '';\r\n\t\t\t\tthis.keywords = '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetValue(tag) {\r\n\t\t\treturn Array.isArray(tag) ? this.$injector.invoke(tag, this, this.$state.$current.locals.globals) : this.$interpolate(tag)(this.$state.$current.locals.globals);\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.service('MetaTags', MetaTags);\r\n\t\r\n\t/* @ngInject */\r\n\tfunction runBlock($log: angular.ILogService, $rootScope: any, MetaTags: uiroutermetatags.MetaTags) {\r\n\t\t$rootScope.MetaTags = MetaTags;\r\n\r\n\t\t$rootScope.$on(\"$stateChangeSuccess\", stateChangeSuccess);\r\n\r\n\t\tfunction stateChangeSuccess(event: angular.IAngularEvent, toState: any) {\r\n\t\t\tif (!toState.metaTags) {\r\n\t\t\t\t$log.debug(`MetaTags - route: \"${toState.name}\" does not contain any metatags`);\r\n\t\t\t}\r\n\t\t\tMetaTags.update(toState.metaTags);\r\n\t\t};\r\n\t}\r\n\r\n\tappModule.run(runBlock);\r\n\r\n}","var uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n            this.defaultDescription = '';\n            this.defaultKeywords = '';\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultDescription = function (description) {\n            this.defaultDescription = description;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultKeywords = function (keywords) {\n            this.defaultKeywords = keywords;\n            return this;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle,\n                defaultDescription: this.defaultDescription,\n                defaultKeywords: this.defaultKeywords\n            };\n        };\n        return UIRouterMetatags;\n    })();\n    uiroutermetatags.UIRouterMetatags = UIRouterMetatags;\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags($log, UIRouterMetatags, $interpolate, $injector, $state) {\n            this.$log = $log;\n            this.UIRouterMetatags = UIRouterMetatags;\n            this.$interpolate = $interpolate;\n            this.$injector = $injector;\n            this.$state = $state;\n        }\n        MetaTags.prototype.update = function (tags) {\n            var _this = this;\n            this.properties = {};\n            if (tags) {\n                this.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue(tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                this.description = tags.description ? this.getValue(tags.description) : this.UIRouterMetatags.defaultDescription;\n                this.keywords = tags.keywords ? this.getValue(tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n                angular.forEach(tags.properties, function (value, key) {\n                    _this.properties[key] = _this.getValue(value);\n                });\n            }\n            else {\n                this.title = this.UIRouterMetatags.defaultTitle;\n                this.description = '';\n                this.keywords = '';\n            }\n        };\n        MetaTags.prototype.getValue = function (tag) {\n            return Array.isArray(tag) ? this.$injector.invoke(tag, this, this.$state.$current.locals.globals) : this.$interpolate(tag)(this.$state.$current.locals.globals);\n        };\n        return MetaTags;\n    })();\n    uiroutermetatags.MetaTags = MetaTags;\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlock($log, $rootScope, MetaTags) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on(\"$stateChangeSuccess\", stateChangeSuccess);\n        function stateChangeSuccess(event, toState) {\n            if (!toState.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + toState.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update(toState.metaTags);\n        }\n        ;\n    }\n    appModule.run(runBlock);\n})(uiroutermetatags || (uiroutermetatags = {}));\n","var uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n            this.defaultDescription = '';\n            this.defaultKeywords = '';\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultDescription = function (description) {\n            this.defaultDescription = description;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultKeywords = function (keywords) {\n            this.defaultKeywords = keywords;\n            return this;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle,\n                defaultDescription: this.defaultDescription,\n                defaultKeywords: this.defaultKeywords\n            };\n        };\n        return UIRouterMetatags;\n    })();\n    uiroutermetatags.UIRouterMetatags = UIRouterMetatags;\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags($log, UIRouterMetatags, $interpolate, $injector, $state) {\n            this.$log = $log;\n            this.UIRouterMetatags = UIRouterMetatags;\n            this.$interpolate = $interpolate;\n            this.$injector = $injector;\n            this.$state = $state;\n        }\n        MetaTags.$inject = [\"$log\", \"UIRouterMetatags\", \"$interpolate\", \"$injector\", \"$state\"];\n        MetaTags.prototype.update = function (tags) {\n            var _this = this;\n            this.properties = {};\n            if (tags) {\n                this.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue(tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                this.description = tags.description ? this.getValue(tags.description) : this.UIRouterMetatags.defaultDescription;\n                this.keywords = tags.keywords ? this.getValue(tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n                angular.forEach(tags.properties, function (value, key) {\n                    _this.properties[key] = _this.getValue(value);\n                });\n            }\n            else {\n                this.title = this.UIRouterMetatags.defaultTitle;\n                this.description = '';\n                this.keywords = '';\n            }\n        };\n        MetaTags.prototype.getValue = function (tag) {\n            return Array.isArray(tag) ? this.$injector.invoke(tag, this, this.$state.$current.locals.globals) : this.$interpolate(tag)(this.$state.$current.locals.globals);\n        };\n        return MetaTags;\n    })();\n    uiroutermetatags.MetaTags = MetaTags;\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlock($log, $rootScope, MetaTags) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on(\"$stateChangeSuccess\", stateChangeSuccess);\n        function stateChangeSuccess(event, toState) {\n            if (!toState.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + toState.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update(toState.metaTags);\n        }\n        ;\n    }\n    runBlock.$inject = [\"$log\", \"$rootScope\", \"MetaTags\"];\n    appModule.run(runBlock);\n})(uiroutermetatags || (uiroutermetatags = {}));\n\n//# sourceMappingURL=ui-router-metatags.js.map"],"sourceRoot":"/source/"}