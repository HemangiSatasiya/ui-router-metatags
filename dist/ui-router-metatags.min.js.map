{"version":3,"sources":["ui-router-metatags.ts","ui-router-metatags.js"],"names":["uiroutermetatags","runBlockTransitions","$log","MetaTags","$window","$transitions","onStart","transition","prerenderReady","onSuccess","toState","$to","$from","metaTags","debug","name","update","onError","prerender","statusCode","runBlock","$rootScope","stateChangeStart","event","toParams","from","fromParams","stateChangeSuccess","stateChangeError","fromState","error","stateNotFound","unfoundState","$on","$inject","appModule","angular","module","UIRouterMetatags","this","prefix","suffix","defaultTitle","defaultDescription","defaultKeywords","defaultRobots","staticProperties","enableOGURL","prototype","setTitlePrefix","setTitleSuffix","setDefaultTitle","title","setDefaultDescription","description","setDefaultKeywords","keywords","setDefaultRobots","robots","setStaticProperties","properties","setOGURL","enabled","$get","provider","$interpolate","$injector","$state","$location","tags","_this","extend","absUrl","getValue","forEach","value","key","v","header","err","tagType","tag","trim","length","isFunction","Array","isArray","console","log","$current","$locals","invoke","locals","globals","service","run"],"mappings":"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","file":"ui-router-metatags.min.js","sourcesContent":["/**\n * Metatags for angular-ui-router\n */\nnamespace uiroutermetatags {\n\tconst appModule = angular.module('ui.router.metatags', ['ui.router']);\n\n\texport interface IMetaTags {\n\t\ttitle?: string | Function;\n\t\tdescription?: string | Function;\n\t\tkeywords?: string | Function;\n\t\trobots?: string | Function;\n\t\tproperties?: {\n\t\t\t[index: string]: string | Function;\n\t\t},\n\t\tprerender?: Prerender;\n\t}\n\n\texport interface Prerender {\n\t\tstatusCode?: number | Function,\n\t\theader?: string | Function\n\t}\n\n\texport interface IProvider {\n\t\tsetTitlePrefix(prefix: string): IProvider;\n\t\tsetTitleSuffix(suffix: string): IProvider;\n\t\tsetDefaultTitle(title: string): IProvider;\n\t\tsetDefaultDescription(description: string): IProvider;\n\t\tsetDefaultKeywords(keywords: string): IProvider;\n\t\tsetDefaultRobots(robots: string): IProvider;\n\t\tsetStaticProperties(properties: {}): IProvider;\n\t\tsetOGURL(enabled: boolean): IProvider;\n\t}\n\n\texport interface IService {\n\t\tupdate(tags: IMetaTags): void;\n\t\tprerender: uiroutermetatags.Prerender;\n\t}\n\n\texport interface IConfig {\n\t\tprefix: string;\n\t\tsuffix: string;\n\t\tdefaultTitle: string;\n\t\tdefaultDescription: string;\n\t\tdefaultKeywords: string;\n\t\tdefaultRobots: string;\n\t\tstaticProperties: {};\n\t\tenableOGURL: boolean;\n\t}\n\n\tclass UIRouterMetatags implements angular.IServiceProvider, uiroutermetatags.IProvider {\n\t\tprefix: string = '';\n\t\tsuffix: string = '';\n\t\tdefaultTitle: string = '';\n\t\tdefaultDescription: string = '';\n\t\tdefaultKeywords: string = '';\n\t\tdefaultRobots: string = '';\n\t\tstaticProperties: {} = {};\n\t\tenableOGURL: boolean = false;\n\n\t\t/* @ngInject */\n\t\tconstructor() {\n\n\t\t}\n\n\t\tsetTitlePrefix(prefix: string): UIRouterMetatags {\n\t\t\tthis.prefix = prefix;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetTitleSuffix(suffix: string): UIRouterMetatags {\n\t\t\tthis.suffix = suffix;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultTitle(title: string): UIRouterMetatags {\n\t\t\tthis.defaultTitle = title;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultDescription(description: string): UIRouterMetatags {\n\t\t\tthis.defaultDescription = description;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultKeywords(keywords: string): UIRouterMetatags {\n\t\t\tthis.defaultKeywords = keywords;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetDefaultRobots(robots: string): UIRouterMetatags {\n\t\t\tthis.defaultRobots = robots;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetStaticProperties(properties: {}): UIRouterMetatags {\n\t\t\tthis.staticProperties = properties;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetOGURL(enabled: boolean): UIRouterMetatags {\n\t\t\tthis.enableOGURL = enabled;\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic $get(): uiroutermetatags.IConfig {\n\t\t\treturn {\n\t\t\t\tprefix: this.prefix,\n\t\t\t\tsuffix: this.suffix,\n\t\t\t\tdefaultTitle: this.defaultTitle,\n\t\t\t\tdefaultDescription: this.defaultDescription,\n\t\t\t\tdefaultKeywords: this.defaultKeywords,\n\t\t\t\tdefaultRobots: this.defaultRobots,\n\t\t\t\tstaticProperties: this.staticProperties,\n\t\t\t\tenableOGURL: this.enableOGURL\n\t\t\t}\n\t\t}\n\t}\n\n\tappModule.provider('UIRouterMetatags', UIRouterMetatags);\n\n\tclass MetaTags {\n\t\ttitle: string;\n\t\tkeywords: string;\n\t\tdescription: string;\n\t\trobots: string;\n\t\tproperties: {};\n\t\tprerender: uiroutermetatags.Prerender = {};\n\t\t\n\t\t/* @ngInject */\n\t\tconstructor(public $log: angular.ILogService, public UIRouterMetatags: uiroutermetatags.IConfig, public $interpolate: angular.IInterpolateService, public $injector: angular.auto.IInjectorService, public $state: any, public $location: angular.ILocationService, public $window) {\n\t\t}\n\n\t\tupdate(tags: uiroutermetatags.IMetaTags) {\n\t\t\ttry {\n\t\t\t\tthis.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);\n\n\t\t\t\tif (this.UIRouterMetatags.enableOGURL) {\n\t\t\t\t\tthis.properties['og:url'] = this.$location.absUrl();\n\t\t\t\t}\n\n\t\t\t\tif (tags) {\n\t\t\t\t\tthis.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue('title', tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n\t\t\t\t\tthis.description = tags.description ? this.getValue('description', tags.description) : this.UIRouterMetatags.defaultDescription;\n\t\t\t\t\tthis.keywords = tags.keywords ? this.getValue('keywords', tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n\t\t\t\t\tthis.robots = tags.robots ? this.getValue('robots', tags.robots) : this.UIRouterMetatags.defaultRobots;\n\t\t\t\t\tangular.forEach(tags.properties, (value, key) => {\n\t\t\t\t\t\tvar v = this.getValue(key, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tthis.properties[key] = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.title = this.UIRouterMetatags.defaultTitle;\n\t\t\t\t\tthis.description = this.UIRouterMetatags.defaultDescription;\n\t\t\t\t\tthis.keywords = this.UIRouterMetatags.defaultKeywords;\n\t\t\t\t\tthis.robots = this.UIRouterMetatags.defaultRobots;\n\t\t\t\t}\n\t\t\t\tif (tags && tags.prerender) {\n\t\t\t\t\tthis.prerender.statusCode = tags.prerender.statusCode ? this.getValue('prerender.statusCode', tags.prerender.statusCode) : 200;\n\t\t\t\t\tthis.prerender.header = tags.prerender.header ? this.getValue('rerender.header', tags.prerender.header) : null;\n\t\t\t\t} else {\n\t\t\t\t\tthis.prerender.statusCode = 200;\n\t\t\t\t\tthis.prerender.header = null;\n\t\t\t\t}\n\n\t\t\t\tthis.$window.prerenderReady = true;\n\t\t\t} catch (err) {\n\t\t\t\tthis.$log.error('error occured when extracting metatags:', err);\n\t\t\t}\n\t\t}\n\n\t\tgetValue(tagType: string, tag) {\n\t\t\ttry {\n\t\t\t\tif (!tag) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (typeof tag === 'number') {\n\t\t\t\t\treturn tag;\n\t\t\t\t} else if (typeof tag === 'string' && tag.trim().length === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (angular.isFunction(tag) || Array.isArray(tag)) {\n\t\t\t\t\tconsole.log('function',this.$state, this.$state.$current, this.$state.$current.$locals)\n\t\t\t\t\treturn this.$injector.invoke(tag, this, this.$state.$current.locals.globals);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.$interpolate(tag)(this.$state.$current.locals.globals);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis.$log.error('error occured when trying to get the value of tag:', tagType, err);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tappModule.service('MetaTags', MetaTags);\n\n\t/* @ngInject */\n\tfunction runBlockTransitions($log: angular.ILogService, MetaTags: uiroutermetatags.IService, $window: angular.IWindowService, $transitions: any) {\n\n\t\t$transitions.onStart({}, onStart)\n\t\t$transitions.onSuccess({}, onSuccess)\n\t\t$transitions.onError({}, onError)\n\n\n\t\tfunction onStart(transition: any) {\n\t\t\t$window.prerenderReady = false;\n\t\t}\n\n\t\t// function stateChangeSuccess(event: angular.IAngularEvent, toState: any) {\n\t\tfunction onSuccess(transition: any) {\n\t\t\tvar toState = transition.$to()\n\t\t\tvar fromState = transition.$from()\n\t\t\t\n\t\t\tif (!toState.metaTags) {\n\t\t\t\t$log.debug(`MetaTags - route: \"${toState.name}\" does not contain any metatags`);\n\t\t\t}\n\n\t\t\tMetaTags.update(toState.metaTags as uiroutermetatags.IMetaTags);\n\t\t}\n\n\t\t// function stateChangeError(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, fromState: angular.ui.IState, fromParams: any, error: any) {\n\t\tfunction onError(transition: any) {\n\t\t\tMetaTags.prerender.statusCode = 500;\n\t\t\t$window.prerenderReady = true;\n\t\t}\n\t}\n\t\n\t/* @ngInject */\n\tfunction runBlock($log: angular.ILogService, $rootScope: any, MetaTags: uiroutermetatags.IService, $window: angular.IWindowService) {\n\t\t$rootScope.MetaTags = MetaTags;\n\n\t\t$rootScope.$on('$stateChangeStart', stateChangeStart);\n        $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n        $rootScope.$on('$stateChangeError', stateChangeError);\n        $rootScope.$on('$stateNotFound', stateNotFound);\n\n\t\tfunction stateChangeStart(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, from: angular.ui.IState, fromParams: any) {\n            $window.prerenderReady = false;\n\t\t}\n\n\t\tfunction stateChangeSuccess(event: angular.IAngularEvent, toState: any) {\n\t\t\tif (!toState.metaTags) {\n\t\t\t\t$log.debug(`MetaTags - route: \"${toState.name}\" does not contain any metatags`);\n\t\t\t}\n\t\t\tMetaTags.update(toState.metaTags);\n\t\t}\n\n\t\tfunction stateChangeError(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, fromState: angular.ui.IState, fromParams: any, error: any) {\n\t\t\tMetaTags.prerender.statusCode = 500;\n\t\t\t$window.prerenderReady = true;\n\t\t}\n\n\t\tfunction stateNotFound(event: angular.IAngularEvent, unfoundState: angular.ui.IState, fromState: angular.ui.IState) {\n\t\t\tMetaTags.prerender.statusCode = 404;\n\t\t\t$window.prerenderReady = true;\n\t\t}\n\t}\n\n\tappModule.run(runBlock);\n\tappModule.run(runBlockTransitions);\n}\n\ndeclare module angular.ui {\n    interface IState {\n\t\tmetaTags?: uiroutermetatags.IMetaTags;\n\t}\n}\n\ninterface Window {\n\tprerenderReady?: boolean;\n}\n","/**\n * Metatags for angular-ui-router\n */\nvar uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n            this.defaultDescription = '';\n            this.defaultKeywords = '';\n            this.defaultRobots = '';\n            this.staticProperties = {};\n            this.enableOGURL = false;\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultDescription = function (description) {\n            this.defaultDescription = description;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultKeywords = function (keywords) {\n            this.defaultKeywords = keywords;\n            return this;\n        };\n        UIRouterMetatags.prototype.setDefaultRobots = function (robots) {\n            this.defaultRobots = robots;\n            return this;\n        };\n        UIRouterMetatags.prototype.setStaticProperties = function (properties) {\n            this.staticProperties = properties;\n            return this;\n        };\n        UIRouterMetatags.prototype.setOGURL = function (enabled) {\n            this.enableOGURL = enabled;\n            return this;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle,\n                defaultDescription: this.defaultDescription,\n                defaultKeywords: this.defaultKeywords,\n                defaultRobots: this.defaultRobots,\n                staticProperties: this.staticProperties,\n                enableOGURL: this.enableOGURL\n            };\n        };\n        return UIRouterMetatags;\n    }());\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags($log, UIRouterMetatags, $interpolate, $injector, $state, $location, $window) {\n            this.$log = $log;\n            this.UIRouterMetatags = UIRouterMetatags;\n            this.$interpolate = $interpolate;\n            this.$injector = $injector;\n            this.$state = $state;\n            this.$location = $location;\n            this.$window = $window;\n            this.prerender = {};\n        }\n        MetaTags.prototype.update = function (tags) {\n            var _this = this;\n            try {\n                this.properties = angular.extend({}, this.UIRouterMetatags.staticProperties);\n                if (this.UIRouterMetatags.enableOGURL) {\n                    this.properties['og:url'] = this.$location.absUrl();\n                }\n                if (tags) {\n                    this.title = tags.title ? this.UIRouterMetatags.prefix + (this.getValue('title', tags.title) || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                    this.description = tags.description ? this.getValue('description', tags.description) : this.UIRouterMetatags.defaultDescription;\n                    this.keywords = tags.keywords ? this.getValue('keywords', tags.keywords) : this.UIRouterMetatags.defaultKeywords;\n                    this.robots = tags.robots ? this.getValue('robots', tags.robots) : this.UIRouterMetatags.defaultRobots;\n                    angular.forEach(tags.properties, function (value, key) {\n                        var v = _this.getValue(key, value);\n                        if (v) {\n                            _this.properties[key] = v;\n                        }\n                    });\n                }\n                else {\n                    this.title = this.UIRouterMetatags.defaultTitle;\n                    this.description = this.UIRouterMetatags.defaultDescription;\n                    this.keywords = this.UIRouterMetatags.defaultKeywords;\n                    this.robots = this.UIRouterMetatags.defaultRobots;\n                }\n                if (tags && tags.prerender) {\n                    this.prerender.statusCode = tags.prerender.statusCode ? this.getValue('prerender.statusCode', tags.prerender.statusCode) : 200;\n                    this.prerender.header = tags.prerender.header ? this.getValue('rerender.header', tags.prerender.header) : null;\n                }\n                else {\n                    this.prerender.statusCode = 200;\n                    this.prerender.header = null;\n                }\n                this.$window.prerenderReady = true;\n            }\n            catch (err) {\n                this.$log.error('error occured when extracting metatags:', err);\n            }\n        };\n        MetaTags.prototype.getValue = function (tagType, tag) {\n            try {\n                if (!tag) {\n                    return null;\n                }\n                else if (typeof tag === 'number') {\n                    return tag;\n                }\n                else if (typeof tag === 'string' && tag.trim().length === 0) {\n                    return null;\n                }\n                else if (angular.isFunction(tag) || Array.isArray(tag)) {\n                    console.log('function', this.$state, this.$state.$current, this.$state.$current.$locals);\n                    return this.$injector.invoke(tag, this, this.$state.$current.locals.globals);\n                }\n                else {\n                    return this.$interpolate(tag)(this.$state.$current.locals.globals);\n                }\n            }\n            catch (err) {\n                this.$log.error('error occured when trying to get the value of tag:', tagType, err);\n                return null;\n            }\n        };\n        return MetaTags;\n    }());\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlockTransitions($log, MetaTags, $window, $transitions) {\n        $transitions.onStart({}, onStart);\n        $transitions.onSuccess({}, onSuccess);\n        $transitions.onError({}, onError);\n        function onStart(transition) {\n            $window.prerenderReady = false;\n        }\n        // function stateChangeSuccess(event: angular.IAngularEvent, toState: any) {\n        function onSuccess(transition) {\n            var toState = transition.$to();\n            var fromState = transition.$from();\n            if (!toState.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + toState.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update(toState.metaTags);\n        }\n        // function stateChangeError(event: angular.IAngularEvent, toState: angular.ui.IState, toParams: any, fromState: angular.ui.IState, fromParams: any, error: any) {\n        function onError(transition) {\n            MetaTags.prerender.statusCode = 500;\n            $window.prerenderReady = true;\n        }\n    }\n    /* @ngInject */\n    function runBlock($log, $rootScope, MetaTags, $window) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on('$stateChangeStart', stateChangeStart);\n        $rootScope.$on('$stateChangeSuccess', stateChangeSuccess);\n        $rootScope.$on('$stateChangeError', stateChangeError);\n        $rootScope.$on('$stateNotFound', stateNotFound);\n        function stateChangeStart(event, toState, toParams, from, fromParams) {\n            $window.prerenderReady = false;\n        }\n        function stateChangeSuccess(event, toState) {\n            if (!toState.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + toState.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update(toState.metaTags);\n        }\n        function stateChangeError(event, toState, toParams, fromState, fromParams, error) {\n            MetaTags.prerender.statusCode = 500;\n            $window.prerenderReady = true;\n        }\n        function stateNotFound(event, unfoundState, fromState) {\n            MetaTags.prerender.statusCode = 404;\n            $window.prerenderReady = true;\n        }\n    }\n    appModule.run(runBlock);\n    appModule.run(runBlockTransitions);\n})(uiroutermetatags || (uiroutermetatags = {}));\n"]}