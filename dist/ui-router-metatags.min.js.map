{"version":3,"sources":["/source/ui-router-metatags.ts","/source/ui-router-metatags.js","ui-router-metatags.js"],"names":["uiroutermetatags","runBlock","uiroutermetatags.runBlock","$state","current","metaTags","$log","debug","name","MetaTags","update","uiroutermetatags.UIRouterMetatags","uiroutermetatags.UIRouterMetatags.constructor","uiroutermetatags.UIRouterMetatags.setTitlePrefix","uiroutermetatags.UIRouterMetatags.setTitleSuffix","uiroutermetatags.UIRouterMetatags.setDefaultTitle","uiroutermetatags.UIRouterMetatags.$get","uiroutermetatags.MetaTags","uiroutermetatags.MetaTags.constructor","$inject","uiroutermetatags.MetaTags.update"],"mappings":"AAAA,GAAUA,mBAAV,SAAUA,GCsDN,QAASC,GDkBMD,EAA2BA,EAAiBA,EAAaA,GAC1EE,EAAWA,SAAWA,EAEtBA,EAAWA,IAAIA,sBAAuBA,WAChCC,EAAOC,QAAQC,UACnBC,EAAKC,MAAM,sBAAsBJ,EAAOC,QAAQI,KAAI,mCAErDC,EAASC,OAAOP,EAAOC,QAAQC,YA9EjCL,GAAMA,GAAYA,QAAQA,OAAOA,sBAAuBA,cASxDA,EAAAA,WAMCW,QAAAA,KALAC,KAAAA,OAAiBA,GACjBA,KAAAA,OAAiBA,GACjBA,KAAAA,aAAuBA,GA0BxBD,MAnBCA,GAAAA,UAAAA,eAAAA,SAAeA,GACdE,KAAKA,OAASA,GAGfF,EAAAA,UAAAA,eAAAA,SAAeA,GACdG,KAAKA,OAASA,GAGfH,EAAAA,UAAAA,gBAAAA,SAAgBA,GACfI,KAAKA,aAAeA,GAGdJ,EAAAA,UAAAA,KAAPA,WACCK,OACCA,OAAQA,KAAKA,OACbA,OAAQA,KAAKA,OACbA,aAAcA,KAAKA,eAGtBL,IA7BaX,GAAAA,iBAAgBA,EA+B7BA,EAAUA,SAASA,mBAAoBA,EAEvCA,IAAAA,GAAAA,WAOCiB,QAAAA,GAAmBA,GAAAC,KAAAA,iBAAAA,EAiBpBD,MEhCOR,GAASU,SAAW,oBFmB1BF,EAAAA,UAAAA,OAAAA,SAAOA,GACFG,GACHA,KAAKA,MAAQA,EAAKA,MAAQA,KAAKA,iBAAiBA,QAAUA,EAAKA,OAASA,IAAMA,KAAKA,iBAAiBA,OAASA,KAAKA,iBAAiBA,aACnIA,KAAKA,YAAcA,EAAKA,aAAeA,GACvCA,KAAKA,SAAWA,EAAKA,UAAYA,GACjCA,KAAKA,WAAaA,EAAKA,iBAEvBA,KAAKA,MAAQA,KAAKA,iBAAiBA,aACnCA,KAAKA,YAAcA,GACnBA,KAAKA,SAAWA,GAChBA,KAAKA,gBAGRH,IAxBajB,GAAAA,SAAQA,EA0BrBA,EAAUA,QAAQA,WAAYA,GEL3BC,EAASkB,SAAW,OAAQ,aAAc,SAAU,YFmBvDnB,EAAUA,IAAIA,IAnFLA,mBAAAA","file":"ui-router-metatags.min.js","sourcesContent":["namespace uiroutermetatags {\r\n\tconst appModule = angular.module('ui.router.metatags', ['ui.router']);\r\n\r\n\texport interface IMetaTags {\r\n\t\ttitle?: string;\r\n\t\tdescription?: string;\r\n\t\tkeywords?: string;\r\n\t\tproperties?: {};\r\n\t}\r\n\r\n\texport class UIRouterMetatags implements angular.IServiceProvider {\r\n\t\tprefix: string = '';\r\n\t\tsuffix: string = '';\r\n\t\tdefaultTitle: string = '';\r\n\r\n\t\t/* @ngInject */\r\n\t\tconstructor() {\r\n\r\n\t\t}\r\n\r\n\t\tsetTitlePrefix(prefix: string): void {\r\n\t\t\tthis.prefix = prefix;\r\n\t\t}\r\n\r\n\t\tsetTitleSuffix(suffix: string): void {\r\n\t\t\tthis.suffix = suffix;\r\n\t\t}\r\n\r\n\t\tsetDefaultTitle(title: string): void {\r\n\t\t\tthis.defaultTitle = title;\r\n\t\t}\r\n\r\n\t\tpublic $get() {\r\n\t\t\treturn {\r\n\t\t\t\tprefix: this.prefix,\r\n\t\t\t\tsuffix: this.suffix,\r\n\t\t\t\tdefaultTitle: this.defaultTitle\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.provider('UIRouterMetatags', UIRouterMetatags);\r\n\r\n\texport class MetaTags {\r\n\t\ttitle: string;\r\n\t\tkeywords: string;\r\n\t\tdescription: string;\r\n\t\tproperties: {};\r\n\t\t\r\n\t\t/* @ngInject */\r\n\t\tconstructor(public UIRouterMetatags: UIRouterMetatags) {\r\n\r\n\t\t}\r\n\r\n\t\tupdate(tags: IMetaTags) {\r\n\t\t\tif (tags) {\r\n\t\t\t\tthis.title = tags.title ? this.UIRouterMetatags.prefix + (tags.title || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\tthis.description = tags.description || '';\r\n\t\t\t\tthis.keywords = tags.keywords || '';\r\n\t\t\t\tthis.properties = tags.properties || {};\r\n\t\t\t} else {\r\n\t\t\t\tthis.title = this.UIRouterMetatags.defaultTitle;\r\n\t\t\t\tthis.description = '';\r\n\t\t\t\tthis.keywords = '';\r\n\t\t\t\tthis.properties = {};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tappModule.service('MetaTags', MetaTags);\r\n\t\r\n\t/* @ngInject */\r\n\tfunction runBlock($log: angular.ILogService, $rootScope: any, $state: any, MetaTags: MetaTags) {\r\n\t\t$rootScope.MetaTags = MetaTags;\r\n\r\n\t\t$rootScope.$on(\"$stateChangeSuccess\", function() {\r\n\t\t\tif (!$state.current.metaTags) {\r\n\t\t\t\t$log.debug(`MetaTags - route: \"${$state.current.name}\" does not contain any metatags`);\r\n\t\t\t}\r\n\t\t\tMetaTags.update($state.current.metaTags);\r\n\t\t});\r\n\t}\r\n\r\n\tappModule.run(runBlock);\r\n\r\n}","var uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle\n            };\n        };\n        return UIRouterMetatags;\n    })();\n    uiroutermetatags.UIRouterMetatags = UIRouterMetatags;\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags(UIRouterMetatags) {\n            this.UIRouterMetatags = UIRouterMetatags;\n        }\n        MetaTags.prototype.update = function (tags) {\n            if (tags) {\n                this.title = tags.title ? this.UIRouterMetatags.prefix + (tags.title || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                this.description = tags.description || '';\n                this.keywords = tags.keywords || '';\n                this.properties = tags.properties || {};\n            }\n            else {\n                this.title = this.UIRouterMetatags.defaultTitle;\n                this.description = '';\n                this.keywords = '';\n                this.properties = {};\n            }\n        };\n        return MetaTags;\n    })();\n    uiroutermetatags.MetaTags = MetaTags;\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlock($log, $rootScope, $state, MetaTags) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on(\"$stateChangeSuccess\", function () {\n            if (!$state.current.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + $state.current.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update($state.current.metaTags);\n        });\n    }\n    appModule.run(runBlock);\n})(uiroutermetatags || (uiroutermetatags = {}));\n","var uiroutermetatags;\n(function (uiroutermetatags) {\n    var appModule = angular.module('ui.router.metatags', ['ui.router']);\n    var UIRouterMetatags = (function () {\n        /* @ngInject */\n        function UIRouterMetatags() {\n            this.prefix = '';\n            this.suffix = '';\n            this.defaultTitle = '';\n        }\n        UIRouterMetatags.prototype.setTitlePrefix = function (prefix) {\n            this.prefix = prefix;\n        };\n        UIRouterMetatags.prototype.setTitleSuffix = function (suffix) {\n            this.suffix = suffix;\n        };\n        UIRouterMetatags.prototype.setDefaultTitle = function (title) {\n            this.defaultTitle = title;\n        };\n        UIRouterMetatags.prototype.$get = function () {\n            return {\n                prefix: this.prefix,\n                suffix: this.suffix,\n                defaultTitle: this.defaultTitle\n            };\n        };\n        return UIRouterMetatags;\n    })();\n    uiroutermetatags.UIRouterMetatags = UIRouterMetatags;\n    appModule.provider('UIRouterMetatags', UIRouterMetatags);\n    var MetaTags = (function () {\n        /* @ngInject */\n        function MetaTags(UIRouterMetatags) {\n            this.UIRouterMetatags = UIRouterMetatags;\n        }\n        MetaTags.$inject = [\"UIRouterMetatags\"];\n        MetaTags.prototype.update = function (tags) {\n            if (tags) {\n                this.title = tags.title ? this.UIRouterMetatags.prefix + (tags.title || '') + this.UIRouterMetatags.suffix : this.UIRouterMetatags.defaultTitle;\n                this.description = tags.description || '';\n                this.keywords = tags.keywords || '';\n                this.properties = tags.properties || {};\n            }\n            else {\n                this.title = this.UIRouterMetatags.defaultTitle;\n                this.description = '';\n                this.keywords = '';\n                this.properties = {};\n            }\n        };\n        return MetaTags;\n    })();\n    uiroutermetatags.MetaTags = MetaTags;\n    appModule.service('MetaTags', MetaTags);\n    /* @ngInject */\n    function runBlock($log, $rootScope, $state, MetaTags) {\n        $rootScope.MetaTags = MetaTags;\n        $rootScope.$on(\"$stateChangeSuccess\", function () {\n            if (!$state.current.metaTags) {\n                $log.debug(\"MetaTags - route: \\\"\" + $state.current.name + \"\\\" does not contain any metatags\");\n            }\n            MetaTags.update($state.current.metaTags);\n        });\n    }\n    runBlock.$inject = [\"$log\", \"$rootScope\", \"$state\", \"MetaTags\"];\n    appModule.run(runBlock);\n})(uiroutermetatags || (uiroutermetatags = {}));\n\n//# sourceMappingURL=ui-router-metatags.js.map"],"sourceRoot":"/source/"}